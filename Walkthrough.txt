AsyncAweight - An Exploratory Async/ Await Implementation
---------------------------------------------------------

Since C# 8 (-ish), "Task" has had no special meaning to the C# compiler, and all the 
implementation (except code-rewriting) should be able to be done in "userland" code.

This walkthrough was to see how far we could get! - and how much or little "magic" is 
involved!

The limitations I set out for the implementation:
  * Only value-returning operations were to be implemented
  * Cancellation/ CancellationToken were not to be considered.
  * Efficiency was not a large concern.

Each stage has been checked in as a separate commit; to see the evolution of the code,
restore the earliest revision and move forward one revision at a time.

1: First Stage - something that compiles!
-----------------------------------------

I started off with a pseudo "async main", with a call to a dummy method we'd like to run 
asynchronously.  The reason for not using the language's recently-provided "async main" 
functionality was to eliminate as much hidden logic (i.e. "magic"!) as possible.  The 
polling of "done" for completion is not pretty, and maybe I'll clean that up later.

From there, I implemented methods as the compiler complained about them not existing, 
until I had a program that compiled.  The syntax "await someOperation()" kicks off some
compile-time duck-typing by calling ".GetAwaiter()" on the result of someOperation().

In this experiment, "Tusk<T>" is the equivalent of "Task<T>" and "Aweighter<T>" is the 
result of calling "Tusk<T>.GetAwaiter()".


2: Stage Two - something that runs! (ish!)
------------------------------------------

The easiest way to return from an asychronous task is not to be asynchronous at all! 
Normally, that's done via "Task<T>.FromResult(...)" - here, "Tusk<T>.FromResult(...)"
will perform the same job.  To do this, we have to flesh out Tusk and Aweighter:
Tusk needs some way of recording whether the operation has completed and the result,
and Aweighter needs to be connected to the Tusk.  Much like in Main, I've written 
GetResult to poll if the result isn't currently available; and I've fleshed out the test 
to perform two asynchronous operations sequentially.

The code in AsyncMain and GetNameAsink is rewritten by the compiler into classes 
implementing a state machine that steps through the code as operations complete. Part of
this implementation is a "Happy path" optimisation where, if an operation is already
marked as completed, it will continue with the rest of the function straightaway rather
than queuing it for later - this is why we don't need to define the method
"Aweighter<T>.OnCompleted(...)" quite yet.


3: Asychronous operations get real!
-----------------------------------

The most common reason for using/ needing asynchronous operations is to deal with I/O.
While waiting for the device (keyboard, disk, network, etc...) to come back with an
answer, there's nothing else that the thread can do apart from wait. For the operating 
system, a "blocking" system call simply won't schedule the thread to run again until
its result is available.

In this example, we'll use a file watcher to emulate our input device. We'll be watching
for changes to the "C:\temp\touch.txt" file, and changes to this will be used as the 
result of our asynchronous function.

In order to get this data returned from an asynchronous task (ah, Tusk!), we'll be using
a TuskCompletionSource<T> (analogous to a TaskCompletionSource<T>).  This is really 
handy class for making any sort of asynchronous operation work with async/ await.

The changes we need to the Asink/Aweight library are really quite small. The 
TuskCompletionSource sets the result on its Tusk by means of internal access to SetResult,
Aweighter has now to be able to set the continuation Action of the Tusk (again,
via internal access), and it all Just Works....!


4: Scheduling on the thread pool.
---------------------------------

It turns out it doesn't quite work as expected.

If you set breakpoints on the Console.WriteLine statements and in ReadData, and view the
threads and stack, you'll see that the continuation of AsyncMain runs *inside* the call
to ReadData!  While this might look innocuous, my tests indicated that only one thread
is allocated for running callbacks for FileSystemWatcher, so if you had another 
FileSystemWatcher in your code, it wouldn't be able to notify of any changes until this
code had finished.  What we really want is for any continuation to be run on the thread
pool.

This is really easy.  We already have the continuation in the form of an Action, and 
queuing an Action for the threadpool is easy.  The only extra tweak I've made here is to
deal with the rare situation when OnCompleted is called *after* SetResult - normally,
this will hit the "Happy path" optimisation mentioned above, but not always...


5: What about WinForms?
-----------------------

In WinForms (and WPF), actions which update UI elements must run on the UI thread. One
of the early mechanisms for doing this while using background thread was 
BackgroundWorker, which automatically marshalled progress updates onto the UI thread.
Another way of doing this is to use Control.BeginInvoke - this works by posting a 
message onto the Windows message queue; when this is processed (on the UI thread) it'll
run the given action.

To make it easy to run async operations from your WinForms control events, and still
update your UI, the concept of a "SynchronizationContext" was introduced.

The SynchronizationContext describes how continuations of async operations should be run.
I've taken a slightly simpler approach to doing this than the "real" implementation:
The static "AsinkAweight.ActionScheduler" class has a static "Current" property to 
define the current Scheduler, simply as something that can queue actions for execution.
The implementation to run Actions from the Windows message queue is done in 
"WindowsMessageQueueScheduler", and set as the current scheduler in the Form1 constructor
(in the real implementation, this is done when the first Control is created).

I've copied across the implementation of the Console demo code into a simple WinForms
demo.  You'll still need to interact with it by changing the file, and other than 
pressing "Start" to begin, and the output appearing in the message pane, the 
functionality is identical.

If you run this implementation, with breakpoints set on the WriteLine statements, you'll
see that all of the continuations are run on the UI thread.  Thanks to the magic that is
async/await, the window remains responsive to mouse events even while running the 
button code!

6: "async" decorated methods
----------------------------

If you've been paying attention, you'll have noticed that while we've written a few
asynchronous methods returning Tusk<T>, none of them are "async Tusk<T>"; if you try
that, you'll get an error:

"The return type of an async method must be void, Task, Task<T> or a task-like type"

Task-like type? I thought that's what I'd written! :-/

It turns out that in order to use Tusk<T> as a real "Task-like type", the compiler needs
a little help in driving the code rewriting machinery.  This help takes the form of 
TuskMethodBuilder<T> and an attribute decoration on Tusk<T> that points at it.

I don't claim to understand half of what is going on here; it's way out of my league
and I've just managed to fill out enough to get the code to run!

If you now run the test code, you'll see we're able to use async and await in the method 
GetFormattedNameIOAsink to get a name and then format the result.

7: Deadlocks
------------

You've probably hit this a some point.  You're deep in some normal, synchronous code,
and you need to call an async method. You call it, and put ".GetAwaiter().GetResult()"
on the end so you can use the result immediately, and... nothing happens.

Absolutely nothing.

what has normally happened is that you are deep inside a UI event handler (on the UI
thread) - when you need the result, you block the UI thread, but the Synchronization
Context that you kicked the asynchronous event off on *also* requires the UI thread;
there's a message posted on the Windows message queue waiting to finish it off, but 
it can't run while you're blocking!

There's a couple of ways of getting around this.  The "recommended" way is to use 
".ConfigureAwait(false)".  All this does is say that, rather than returning to the 
current synchronization context (currently the winforms one), you're happy to use the 
default synchronization context (the thread pool).  Unfortunately, this doesn't flow
down the call stack, or even from call-to-call (thanks to the "Happy path" optimisation
above, so it has to be specified on all applicable asynchronous calls.  In my code here,
"Tusk<T>.UseDefaultScheduler()" does the same job.

Another way around this would be to explicitly start your asynchronous operation in 
another task.  By starting a new Task, all asynchronous actions on in will use the thread
pool scheduler, rather than whatever current scheduler is defined - however, you'll
lose the "happy path" optimisation as it MUST start executing on the thread pool. I
haven't implemented sufficent code to see this work here.

Some references:

Reference sources for the real implementation:
https://referencesource.microsoft.com/#mscorlib/system/runtime/compilerservices/TaskAwaiter.cs

In depth look at async methods:
https://devblogs.microsoft.com/premier-developer/dissecting-the-async-methods-in-c/

Async method builder:
http://blog.i3arnon.com/2016/07/25/arbitrary-async-returns/

Example of generated code for the state machine:
https://www.codeproject.com/Articles/535635/Async-Await-and-the-Generated-StateMachine

